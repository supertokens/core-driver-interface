openapi: 3.0.0
info:
  description: This version has not been released yet. Core Driver Interface http requests-responses
  version: 2.10.0
  title: Core Driver Interface
  contact:
    email: team@supertokens.io
tags:
  - name: EmailPassword Recipe
  - name: ThirdParty Recipe
  - name: Passwordless Recipe
  - name: EmailVerification Recipe
  - name: Session Recipe
  - name: Core
paths:
  /recipe/signinup/code/consume:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessTryUseCode
      description: |
        Tries to consume the passed userInputCode+deviceId combo or the linkCode to sign the user in
      parameters:
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    linkCode:
                      $ref: '#/components/schemas/linkCode'
                  required:
                    - linkCode
                - type: object
                  properties:
                    deviceId:
                      $ref: '#/components/schemas/deviceId'
                    userInputCode:
                      $ref: '#/components/schemas/userInputCode'
                  required:
                    - deviceId
                    - userInputCode
      responses:
        '200':
          description: Indicates success with the status property
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      codeId:
                        $ref: '#/components/schemas/codeId'
                      createdNewUser:
                        type: boolean
                        example: true
                      user:
                        $ref: '#/components/schemas/passwordlessUser'
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['INCORRECT_USER_INPUT_CODE_ERROR']

                      triesLeft:
                        type: number
                        example: 2
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['RESTART_FLOW_ERROR']

        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/signinup/code:
    post:
      tags:
        - Passwordless Recipe
      operationId: passwordlessStartSignIn
      description: |
        Starts a sign in process by requesting a linkCode and a deviceId + userInputCode combination the user can use to sign in.
      parameters:
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email: 
                      $ref: '#/components/schemas/email'
                    userInputCode:
                      $ref: '#/components/schemas/userInputCode'
                  required:
                    - email
                - type: object
                  properties:
                    phoneNumber:
                      $ref: '#/components/schemas/phoneNumber'
                    userInputCode:
                      $ref: '#/components/schemas/userInputCode'
                  required:
                    - phoneNumber
      responses:
        '200':
          description: Starts the passwordless login process
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'

                    codeId:
                      $ref: '#/components/schemas/codeId'

                    userInputCode: 
                      type: object
                      properties:
                        deviceId:
                          $ref: '#/components/schemas/deviceId'
                        code:
                          $ref: '#/components/schemas/userInputCode'

                    linkCode:
                      $ref: '#/components/schemas/linkCode'

                    timeCreated:
                      $ref: '#/components/schemas/timeCreated'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  /recipe/signinup/codes:
    get:
      tags:
          - Passwordless Recipe
      operationId: passwordlessListCodes
      description: |
        Lists all active passwordless codes of the user
      parameters:
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: email
          description: Either this or phoneNumber is required to identify the user
          schema:
            type: string
        - in: query
          name: phoneNumber
          description: Either this or email is required to identify the user
          schema:
            $ref: '#/components/schemas/phoneNumber'
      responses:
        '200':
          description: List of all active passwordless codes of the user
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    codes:
                      type: array
                      items:
                        type: object
                        properties:
                          codeId:
                            $ref: '#/components/schemas/codeId'
                          timeCreated:
                            $ref: '#/components/schemas/timeCreated'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/signinup/codes/remove:
    post:
      tags:
          - Passwordless Recipe
      operationId: passwordlessRevokeAllCodesOfUser
      description: |
        Revokes all codes issued for the user
      parameters:
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    email: 
                      $ref: '#/components/schemas/email'
                  required:
                    - email
                - type: object
                  properties:
                    phoneNumber:
                      $ref: '#/components/schemas/phoneNumber'
                  required:
                    - phoneNumber
      responses:
        '200':
          description: 'The operation was successful'
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/user⠀⠀:
    get:
      tags:
        - Passwordless Recipe
      operationId: passwordlessGetUser
      description: |
        Get a user's information.
        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
        
      parameters:
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/userId'
        - in: query
          name: email
          description: Use exactly one of phoneNumber, email or userId
          schema:
            $ref: '#/components/schemas/email'
        - in: query
          name: phoneNumber
          description: Use exactly one of phoneNumber, email or userId
          schema:
            $ref: '#/components/schemas/phoneNumber'
      responses:
        '200':
          description: Get a user's information.
          content:
            application/json:
                schema:
                  oneOf:
                    - type: object
                      properties:
                        status:
                          $ref: '#/components/schemas/statusOK'
                        user:
                          $ref: '#/components/schemas/passwordlessUser'
                    - type: object
                      properties:
                        status:
                          type: string
                          enum: ["UNKNOWN_USER_ID_ERROR", "UNKNOWN_EMAIL_ERROR", "UNKNOWN_PHONE_NUMBER_ERROR"]
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Passwordless Recipe
      operationId: passwordlessPutUser
      description: |
        Update a user's information. 
        If the email or phoneNumber is set to null the previous value will be deleted. If they are not set (i.e., undefined/missing from the request), they are left as-is.
      parameters:
        - $ref: '#/components/parameters/passwordlessRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  $ref: '#/components/schemas/userId'
                email:
                  allOf:
                    - $ref: '#/components/schemas/email'
                    - nullable: true
                phoneNumber:
                  allOf:
                    - $ref: '#/components/schemas/phoneNumber'
                    - nullable: true
              required:
                - userId
      
      responses:
        '200':
          description: update user's information
          content:
            application/json:
                schema: 
                  properties:
                    status:
                      type: string
                      enum: ['OK', 'UNKNOWN_USER_ID_ERROR', 'EMAIL_ALREADY_EXISTS_ERROR', 'PHONE_NUMBER_ALREADY_EXISTS_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/signin:
    post:
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordSignin
      description: |
        Signin a user with email ID and password
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: signin response
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    user:
                      $ref: '#/components/schemas/user'
                - $ref: '#/components/schemas/wrongCredentialsResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/signup:
    post:
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordSignup
      description: |
        Signup a user with email ID and password
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/password'
      responses:
        '200':
          description: signup response
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    user:
                      $ref: '#/components/schemas/user' 
                - type: object
                  properties:
                    status:
                      type: string
                      enum: ['EMAIL_ALREADY_EXISTS_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  /recipe/user:
    get:
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordGetUser
      description: |
        Get a user's information
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: email
          description: use either email or userId, not both
          schema:
            $ref: '#/components/schemas/email'
        - in: query
          name: userId
          description: use either email or userId, not both
          schema:
            $ref: '#/components/schemas/userId'
      
      responses:
        '200':
          description: get user's information
          content:
            application/json:
                schema: 
                  oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      user:
                        $ref: '#/components/schemas/user'
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['UNKNOWN_USER_ID_ERROR', 'UNKNOWN_EMAIL_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordPutUser
      description: |
        Update a user's information
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  $ref: '#/components/schemas/userId'
                email:
                  $ref: '#/components/schemas/email'
                password:
                  $ref: '#/components/schemas/password'
      
      responses:
        '200':
          description: update user's information
          content:
            application/json:
                schema: 
                  properties:
                    status:
                      type: string
                      enum: ['OK', 'UNKNOWN_USER_ID_ERROR', 'EMAIL_ALREADY_EXISTS_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
        
  /recipe/user/password/reset/token:
    post:
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordGetPasswordResetToken
      description: |
        Generate a new reset password token for this user
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/userId'
      responses:
        '200':
          description: Generate a new reset password token for this user
          content:
            application/json:
                schema: 
                  oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      token:
                        $ref: '#/components/schemas/token'
                  - $ref: '#/components/schemas/unknownUserIdResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/users:
    get:
      deprecated: true
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordGetUsers
      description: |
        User Pagination API
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/paginationToken'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/timeJoinedOrder'
      responses:
        '200':
          description: get user's information
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    users:
                      type: array
                      items:
                        $ref: '#/components/schemas/user'
                    nextPaginationToken:
                      $ref: '#/components/schemas/paginationToken'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
        
        
          
  /recipe/user/password/reset:
    post:
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordGetPasswordReset
      description: |
        Reset a password using password reset token
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  enum: 
                    - token
                token:
                  $ref: '#/components/schemas/token'
                newPassword:
                  type: string
                  example: newpassword123
      responses:
        '200':
          description: Reset a password using password reset token
          content:
            application/json:
                schema: 
                  oneOf:
                  - $ref: '#/components/schemas/statusOKResponse'
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['RESET_PASSWORD_INVALID_TOKEN_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  
  /recipe/users/count:
    get:
      deprecated: true
      tags:
        - EmailPassword Recipe
      operationId: emailPasswordGetUserCount
      description: |
        Get number of users
      parameters:
        - $ref: '#/components/parameters/rid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      responses:
        '200':
          description: Get number of users
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    count:
                      type: number
                      example: 10
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/signinup:
    post:
      tags:
        - ThirdParty Recipe
      operationId: thirdPartySigninup
      description: |
        Signin/up a user
      parameters:
        - $ref: '#/components/parameters/thirdPartyRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                thirdPartyId:
                  $ref: '#/components/schemas/thirdPartyId'
                thirdPartyUserId:
                  $ref: '#/components/schemas/thirdPartyUserId'
                email:
                  $ref: '#/components/schemas/thirdPartyEmail'
      responses:
        '200':
          description: Signin/up a user
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    createdNewUser:
                      type: boolean
                      example: true
                    user:
                      $ref: '#/components/schemas/thirdPartyUser'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/user⠀:
    get:
      tags:
        - ThirdParty Recipe
      operationId: thirdPartyGetUser
      description: |
        Get a user's information.
        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec. 
        
      parameters:
        - $ref: '#/components/parameters/thirdPartyRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/userId'
        - in: query
          name: thirdPartyId
          description: Either use userId or thirdPartyId and thirdPartyUserId
          schema:
            $ref: '#/components/schemas/thirdPartyId'
        - in: query
          name: thirdPartyUserId
          description: Either use userId or thirdPartyId and thirdPartyUserId
          schema:
            $ref: '#/components/schemas/thirdPartyUserId'
      responses:
        '200':
          description: Get a user's information.
          content:
            application/json:
                schema:
                  oneOf:
                    - type: object
                      properties:
                        status:
                          $ref: '#/components/schemas/statusOK'
                        user:
                          $ref: '#/components/schemas/thirdPartyUser'
                    - type: object
                      properties:
                        status:
                          type: string
                          enum: ["UNKNOWN_USER_ID_ERROR", "UNKNOWN_THIRD_PARTY_USER_ERROR"]
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  /recipe/users/by-email :
    get:
      operationId: thirdPartyGetUsersByEmail
      tags:
        - ThirdParty Recipe
      description: |
        Get all users accounts associated with given email
        
      parameters:
        - $ref: '#/components/parameters/thirdPartyRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: email
          required: true
          description: User's email
          schema:
            type: string
            example: john.doe@example.com
            
        
      responses:
        '200':
          description: Get all users associated with given email
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    users:
                      type: array
                      items:
                        $ref: '#/components/schemas/thirdPartyUser'
          
        '400':
          $ref: '#/components/responses/400'
          
        '401':
          $ref: '#/components/responses/401'
          
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/users⠀:
    get:
      deprecated: true
      tags:
        - ThirdParty Recipe
      operationId: thirdPartyGetUsers
      description: |
        Get User Pagination data.
        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec.
      parameters:
        - $ref: '#/components/parameters/thirdPartyRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/paginationToken'
        - $ref: '#/components/parameters/timeJoinedOrder'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Get user's information.
          content:
            application/json:
                schema:
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      user:
                        type: array
                        items:
                          $ref: '#/components/schemas/thirdPartyUser'
                      nextPaginationToken:
                        $ref: '#/components/schemas/paginationToken'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/users/count⠀:
    get:
      deprecated: true
      tags:
        - ThirdParty Recipe
      operationId: thirdPartyGetUserCount
      description: |
        Get number of users.
        Note that there is an invisible character at the end of the path, this was to avoid a conflict with the OpenAPI spec
      parameters:
        - $ref: '#/components/parameters/thirdPartyRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      responses:
        '200':
          description: Get number of users
          content:
            application/json:
                schema: 
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      count:
                        type: number
                        example: 10
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  # /recipe/user/email/revoke/token:
  #   post:
  #     tags:
  #       - EmailVerification Recipe
  #     operationId: emailVerificationRevokeToken
  #     description: |
  #       Revoke a generated email verification token
  #     parameters:
  #       - $ref: '#/components/parameters/emailVerificationRid'
  #       - $ref: '#/components/parameters/api-key'
  #       - $ref: '#/components/parameters/cdi-version'
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/emailVerificationRevokeTokenRequest'
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/emailVerificationRevokeToken'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '500':
  #         $ref: '#/components/responses/500'
  
  /recipe/user/email/verify/token:
    post:
      tags:
        - EmailVerification Recipe
      operationId: emailVerificationVerifyToken
      description: |
        Generate a new email verification token for this user
      parameters:
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailVerificationVerifyTokenRequest'
      responses:
        '200':
          description: Generate a new email verification token for this user
          content:
            application/json:
                schema: 
                  oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      token:
                        $ref: '#/components/schemas/token'
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['EMAIL_ALREADY_VERIFIED_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/user/email/verify/token/remove:
    post:
      tags:
        - EmailVerification Recipe
      operationId: emailVerificationVerifyTokenRemove
      description: |
        Remove all unused email verification tokens for this user
      parameters:
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailVerificationVerifyTokenRequest'
      responses:
        '200':
          description: OK response
          content:
            application/json:
                schema: 
                  properties:
                    status:
                      type: string
                      enum: ['OK']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/user/email/verify:
    post:
      tags:
        - EmailVerification Recipe
      operationId: emailVerificationVerify
      description: |
        Verify an email
      parameters:
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                method:
                  type: string
                  enum: 
                    - token
                token:
                  $ref: '#/components/schemas/token'
      
      responses:
        '200':
          description: Verify an email
          content:
            application/json:
                schema: 
                  oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      userId:
                        $ref: '#/components/schemas/userId'
                      email:
                        $ref: '#/components/schemas/email'
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['EMAIL_VERIFICATION_INVALID_TOKEN_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - EmailVerification Recipe
      operationId: emailVerificationVerifyGet
      description: |
        Check if an email is verified
      parameters:
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/email'
      responses:
        '200':
          description: Verify an email
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    isVerified:
                      $ref: '#/components/schemas/isVerified'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/user/email/verify/remove:
    post:
      tags:
        - EmailVerification Recipe
      operationId: emailVerificationVerifyRemove
      description: |
        Unverify an email
      parameters:
        - $ref: '#/components/parameters/emailVerificationRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/emailVerificationVerifyTokenRequest'
      
      responses:
        '200':
          description: OK response
          content:
            application/json:
                schema:
                  properties:
                    status:
                      type: string
                      enum: ['OK']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'  
  
  /recipe/handshake:
    post:
      tags: 
        - Session Recipe
      operationId: sessionHandshake
      description: |
        Handshake for session
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      responses:
        '200':
          description: Session Handshake
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    jwtSigningPublicKey:
                      $ref: '#/components/schemas/jwtSigningPublicKey'
                    jwtSigningPublicKeyExpiryTime:
                      $ref: '#/components/schemas/jwtSigningPublicKeyExpiryTime'
                    jwtSigningPublicKeyList:
                      $ref: '#/components/schemas/jwtSigningPublicKeyList'
                    accessTokenBlacklistingEnabled:
                      $ref: '#/components/schemas/accessTokenBlacklistingEnabled'
                    accessTokenValidity:
                      $ref: '#/components/schemas/accessTokenValidity'
                    refreshTokenValidity: 
                      $ref: '#/components/schemas/refreshTokenValidity'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/session:
    post:
      tags:
        - Session Recipe
      operationId: createNewSession
      description: |
        Create a new Session 
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/userId'
                userDataInJWT:
                  $ref: '#/components/schemas/userDataInJWT'
                userDataInDatabase:
                  $ref: '#/components/schemas/userDataInDatabase'
                enableAntiCsrf:
                  $ref: '#/components/schemas/enableAntiCsrf'
      responses:
        '200':
          description: Create a new Session
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status:
                      $ref: '#/components/schemas/statusOK'
                    session:
                      $ref: '#/components/schemas/session'
                    accessToken:
                      $ref: '#/components/schemas/cookieInfo'
                    refreshToken:
                      $ref: '#/components/schemas/cookieInfo'
                    idRefreshToken:
                      $ref: '#/components/schemas/cookieInfo'
                    antiCsrfToken:
                      $ref: '#/components/schemas/token'
                    jwtSigningPublicKey:
                      $ref: '#/components/schemas/jwtSigningPublicKey'
                    jwtSigningPublicKeyExpiryTime:
                      $ref: '#/components/schemas/jwtSigningPublicKeyExpiryTime'
                    jwtSigningPublicKeyList:
                      $ref: '#/components/schemas/jwtSigningPublicKeyList'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
        - Session Recipe
      operationId: getSessionInfo
      description: |
        Get user and session information for a given session handle
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: sessionHandle
          schema:
            $ref: '#/components/schemas/handle'
      responses:
        '200':
          description: Get user and session information for a given session handle
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      userDataInDatabase:
                        $ref: '#/components/schemas/userDataInDatabase'
                      userDataInJWT:
                        $ref: '#/components/schemas/userDataInJWT'
                      userId:
                        $ref: '#/components/schemas/userId'
                      expiry:
                        $ref: '#/components/schemas/expiry'
                      timeCreated: 
                        $ref: '#/components/schemas/timeCreated'
                      sessionHandle:
                        $ref: '#/components/schemas/handle'
                  - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/session/remove:
    post:
      tags:
        - Session Recipe
      operationId: deleteSession
      description: |
        Delete a sesion
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    sessionHandles:
                      $ref: '#/components/schemas/sessionHandles'
                - type: object
                  properties:
                    userId:
                      $ref: '#/components/schemas/userId'
                
      responses:
        '200':
          description: Delete a session
          content:
            application/json:
                schema: 
                  type: object
                  properties:
                    status: 
                      $ref: '#/components/schemas/statusOK'
                    sessionHandlesRevoked:
                      $ref: '#/components/schemas/sessionHandles'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/session/verify:
    post:
      tags:
        - Session Recipe
      operationId: verifySession
      description: |
        Verify a Session
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  $ref: '#/components/schemas/token'
                enableAntiCsrf:
                  $ref: '#/components/schemas/enableAntiCsrf'
                doAntiCsrfCheck:
                  type: boolean
                  example: false
                antiCsrfToken:
                  $ref: '#/components/schemas/token'
      responses:
        '200':
          description: Verify a session
          content:
            application/json:
                schema: 
                  oneOf:
                    - type: object
                      properties:
                        status: 
                          $ref: '#/components/schemas/statusOK'
                        session:
                          $ref: '#/components/schemas/session'
                        accessToken:
                          $ref: '#/components/schemas/cookieInfo'
                        jwtSigningPublicKey:
                          $ref: '#/components/schemas/jwtSigningPublicKey'
                        jwtSigningPublicKeyExpiryTime:
                          $ref: '#/components/schemas/jwtSigningPublicKeyExpiryTime'
                        jwtSigningPublicKeyList:
                          $ref: '#/components/schemas/jwtSigningPublicKeyList'
                    - $ref: '#/components/schemas/unauthorisedMessageResponse'
                    - type: object
                      properties:
                        status:
                          $ref: '#/components/schemas/tryRefreshTokenResponse'
                        jwtSigningPublicKey:
                          $ref: '#/components/schemas/jwtSigningPublicKey'
                        jwtSigningPublicKeyExpiryTime:
                          $ref: '#/components/schemas/jwtSigningPublicKeyExpiryTime'
                        jwtSigningPublicKeyList:
                          $ref: '#/components/schemas/jwtSigningPublicKeyList'
                        message:
                          $ref: '#/components/schemas/message'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
      
  
  /recipe/session/refresh:
    post:
      tags:
        - Session Recipe
      operationId: refreshSession
      description: |
        Refresh a Session
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  $ref: '#/components/schemas/token'
                enableAntiCsrf:
                  $ref: '#/components/schemas/token'
                antiCsrfToken:
                  $ref: '#/components/schemas/token'
      responses:
        '200':
          description: Refresh a session
          content:
            application/json:
                schema: 
                  oneOf:
                    - type: object
                      properties:
                        status: 
                          $ref: '#/components/schemas/statusOK'
                        session:
                          $ref: '#/components/schemas/session'
                        accessToken:
                          $ref: '#/components/schemas/cookieInfo'
                        refreshToken:
                          $ref: '#/components/schemas/cookieInfo'
                        idRefreshToken: 
                          $ref: '#/components/schemas/cookieInfo'
                        antiCsrfToken: 
                          $ref: '#/components/schemas/token'
                    - type: object
                      properties:
                        status:
                          $ref: '#/components/schemas/tokenTheftResponse'
                        session:
                          type: object
                          properties:
                            handle:
                              $ref: '#/components/schemas/handle'
                            userId:
                              $ref: '#/components/schemas/userId'
                    - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/session/user:
    get:
      tags:
        - Session Recipe
      operationId: getUserSessionHandles
      description: |
        Get session handles for a user
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Get user Session Handles
          content:
            application/json:
              schema:
                type: object
                properties: 
                  status: 
                    $ref: '#/components/schemas/statusOK'
                  sessionHandles:
                    $ref: '#/components/schemas/sessionHandles'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/session/regenerate:
    post:
      tags:
        - Session Recipe
      operationId: regenerateSession
      description: |
        Regenerate a session
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken: 
                  $ref: '#/components/schemas/token'
                userDataInJWT:
                  $ref: '#/components/schemas/userDataInJWT'
      responses:
        '200':
          description: Regenerate user session
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      session:  
                        $ref: '#/components/schemas/session'
                      accessToken:
                        $ref: '#/components/schemas/cookieInfo'
                  - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /recipe/session/data:
    get:
      deprecated: true
      tags:
        - Session Recipe
      operationId: getSessionData
      description: |
        Get session data
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: sessionHandle
          description: Users session handle
          schema:
            $ref: '#/components/schemas/handle'
      responses:
        '200':
          description: Get Session Data
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      userDataInDatabase:
                        $ref: '#/components/schemas/userDataInDatabase'
                  - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    
    put:
      tags:
        - Session Recipe
      operationId: putSessionData
      description: |
        Change session data
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionHandle:  
                  $ref: '#/components/schemas/handle'
                userDataInDatabase:
                  $ref: '#/components/schemas/userDataInDatabase'
      responses:
        '200':
          description: Change Session Data
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/statusOKResponse'
                  - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  /recipe/jwt:
    post:
      tags:
        - JWT Recipe
      operationId: createSignedJWT
      description: |
        Create a signed JWT
      parameters:
        - $ref: '#/components/parameters/jwtRID'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                payload:
                  $ref: '#/components/schemas/createJWTPayload'
                algorithm:
                  $ref: '#/components/schemas/createJWTAlgorithm'
                jwksDomain:
                  $ref: '#/components/schemas/jwksDomain'
                validity:
                  $ref: '#/components/schemas/jwtValidity'
      responses:
        '200':
          description: Create a signed JWT
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      jwt:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['UNSUPPORTED_ALGORITHM_ERROR']
          
        '400':
          $ref: '#/components/responses/400'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'

  /recipe/jwt/jwks:
    get:
      tags:
        - JWT Recipe
      description: |
        Retrieve JWKs for JWT verification
      parameters:
        - $ref: '#/components/parameters/jwtRID'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      responses:
        '200':
          description: Retrieve JWKs for JWT verification
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["OK"]
                  keys:
                    type: array
                    items: 
                      $ref: '#/components/schemas/jwk'
          
        '400':
          $ref: '#/components/responses/400'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'


  /recipe/jwt/data:
    get:
      deprecated: true
      tags:
        - Session Recipe
      operationId: getJWTData
      description: |
        Get JWT data for a session
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: sessionHandle
          description: Users session handle
          schema:
            $ref: '#/components/schemas/handle'
      responses:
        '200':
          description: Get JWT Data
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/statusOK'
                      userDataInJWT:
                        $ref: '#/components/schemas/userDataInJWT'
                  - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    
    put:
      tags:
        - Session Recipe
      operationId: putJWTData
      description: |
        Change JWT data for a session
      parameters:
        - $ref: '#/components/parameters/sessionRid'
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionHandle:
                  $ref: '#/components/schemas/handle'
                userDataInJWT:
                  $ref: '#/components/schemas/userDataInJWT'
      responses:
        '200':
          description: Change JWT Data for a session
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/statusOKResponse'
                  - $ref: '#/components/schemas/unauthorisedMessageResponse'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    
  /apiversion:
    get:
      tags:
        - Core
      operationId: getApiVersion
      description: |
        Get a list of compatible CDI versions
      parameters:
        - $ref: '#/components/parameters/api-key'
      responses:
        '200':
          description: get api version
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      type: string
                      example: ['2.9']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /config:
    get:
      tags:
        - Core
      operationId: getConfig
      description: |
        Get path to the loaded config file
      parameters: 
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - in: query
          name: pid
          schema:
            type: string
            example: 21307
          
      responses:
        '200':
          description: get api version
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      status: 
                        $ref: '#/components/schemas/statusOK'
                      path: 
                        type: string
                        example: /usr/lib/supertokens/config.yaml
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: ['NOT_ALLOWED']
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    
  /hello:
    get:
      tags:
        - Core
      operationId: getHello
      description: |
        Return a simple hello message
      responses:
        '200':
          $ref: '#/components/responses/hello'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Core
      operationId: putHello
      description: |
        Return a simple hello message
      responses:
        '200':
          $ref: '#/components/responses/hello'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
    
    post:
      tags:
        - Core
      operationId: postHello
      description: |
        Return a simple hello message
      responses:
        '200':
          $ref: '#/components/responses/hello'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
    delete:
      tags:
        - Core
      operationId: deleteHello
      description: |
        Return a simple hello message
      responses:
        '200':
          $ref: '#/components/responses/hello'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  /telemetry:
    get:
      tags:
        - Core
      operationId: getTelemetry
      description: |
        Returns the telemetryID if it exists
      parameters:
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
      responses:
        '200':
          description:  Returns the telemetryID if it exists
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      exists:
                        type: boolean
                        enum: [true]
                      telemetryId:
                        type: string
                        example: 99c87c72-1807-22d-9b39-7a88f95re56c
                  - type: object
                    properties:
                      exists:
                        type: boolean
                        example: [false]
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
          
  /users/count:
    get:
      tags:
        - Core
      operationId: getUsersCount
      description: |
        Get number of users.
      parameters:
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/includeRecipeIds'
      responses:
        '200':
          description: Get number of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  count:
                    type: number
                    example: 10
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
        
  /users:
    get:
      tags:
        - Core
      operationId: getUsers
      description: |
        User Pagination
      parameters:
        - $ref: '#/components/parameters/api-key'
        - $ref: '#/components/parameters/cdi-version'
        - $ref: '#/components/parameters/includeRecipeIds'
        - $ref: '#/components/parameters/paginationToken'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/timeJoinedOrder'
      responses:
        '200':
          description: User Pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/statusOK'
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        recipeId:
                          type: string
                          enum: ['emailpassword', 'thirdparty', 'passwordless']
                        user:
                          anyOf:
                            - $ref: '#/components/schemas/user'
                            - $ref: '#/components/schemas/thirdPartyUser'
                            - $ref: '#/components/schemas/passwordlessUser'
                      required: [recipeId, user]
                      additionalProperties: false
                  nextPaginationToken: 
                    $ref: '#/components/schemas/paginationToken'
          
        '400':
          $ref: '#/components/responses/400'
        
        '401':
          $ref: '#/components/responses/401'
        
        '404':
          $ref: '#/components/responses/404'
        
        '500':
          $ref: '#/components/responses/500'
  
  # /user/remove:
  #   post:
  #     tags:
  #       - Core
  #     operationId: deleteUser
  #     description: |
  #       Delete user
  #     parameters:
  #       - $ref: '#/components/parameters/api-key'
  #       - $ref: '#/components/parameters/cdi-version'
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/deleteUserRequest'
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/deleteUser'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '500':
  #         $ref: '#/components/responses/500'
          
      
        
components:
  parameters:
    rid:
      name: rid
      in: header
      example: emailpassword
      required: true
      schema:
        type: string
    api-key:
      name: api-key
      in: header
      example: ajs30Nlbs0DjvsdFIne934n8NVee5n
      required: false
      schema:
        type: string
    
    thirdPartyRid:
      name: rid
      in: header
      example: thirdparty
      required: true
      schema:
        type: string
    
    passwordlessRid:
      name: rid
      in: header
      example: passwordless
      required: true
      schema:
        type: string

    emailVerificationRid:
      name: rid
      in: header
      example: emailverification
      required: true
      schema:
        type: string
        
    sessionRid:
      name: rid
      in: header
      example: session
      required: true
      schema:
        type: string

    jwtRID:
      name: rid
      in: header
      example: jwt
      required: true
      schema:
        type: string
        
        
    cdi-version:
      name: cdi-version
      in: header
      description: X.Y of the X.Y.Z CDI version. 
      example: 2.9
      required: true
      schema:
        type: string
    
    
    paginationToken:
      name: paginationToken
      in: query
      example: ZmE3YTA4NDEtY...MjM5MTgwMzIyMzE=
      schema:
        type: string
    
    limit:
      name: limit
      in: query
      example: 1
      schema:
        type: number
    
    timeJoinedOrder:
      name: timeJoinedOrder
      in: query
      schema:
        type: string
        enum: ["ASC", "DESC"]
    

    email:
      name: email
      in: query
      required: false
      schema:
         type: string
         example: johndoe@gmail.com
    
    userId:
      name: userId
      in: query
      required: false
      schema:
         type: string
         example: fa7a0841-b533-4478-9253-0fde890c576
    
    includeRecipeIds:
      name: includeRecipeIds
      in: query
      required: false
      description: The param should take an array of comma seperated strings
      schema:
        type: string
        example: val1,val2,val3..
      
    
  responses:
    500:
      description: error code 500
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/internalError"
    404:
      description: error code 404
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/notFound"
    405:
      description: error code 405
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/methodNotSupported"
    400:
      description: error code 400
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/invalidJSON"
    401:
      description: error code 401
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/requestUnauthorised"

    hello:
      description: return a simple hello message
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/helloResponse'

      

  schemas:
    token:
      type: string
      example: ZTRiOTBjNz...jI5MTZlODkxw
      
    
    
    emailVerificationVerifyTokenRequest:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/userId'
        email:
          $ref: '#/components/schemas/email'

    
  
    thirdPartyId:
      type: string
      example: google
      
    thirdPartyUserId:
      type: string
      example: 106347997792363865062

    thirdPartyEmail:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/email'
    
    isVerified:
          type: boolean
          example: true
          
    email:
      type: string
      example: johndoe@gmail.com
      
    password:
      type: string
      example: password123
    
    userId:
      type: string
      example: fa7a0841-b533-4478-95533-0fde890c3483
    
    timeJoined:
      type: number
      example: 1623918032231
    
    paginationToken:
      type: string
      example: ZmE3YTA4ND...OzE2MjM5MTgwMzIyMzE=

    phoneNumber:
      type: string
      example: '0036701234567'

    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          $ref: '#/components/schemas/email'
        timeJoined:
          $ref: '#/components/schemas/timeJoined'

    passwordlessUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        email:
          $ref: '#/components/schemas/email'
        phoneNumber:
          $ref: '#/components/schemas/phoneNumber'
        timeJoined:
          $ref: '#/components/schemas/timeJoined'

    thirdPartyUser:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        timeJoined:
          $ref: '#/components/schemas/timeJoined'
        email:
          $ref: '#/components/schemas/email'
        thirdparty:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/thirdPartyId'
            userId:
              $ref: '#/components/schemas/thirdPartyUserId'

    codeId:
      type: string
      description: Uniquely identifies a token
      example: QZ0Mx9zG9cfqNXmPI0I/67r9bpKghUBDQZeMMbayi+I=

    deviceId:
      type: string
      description: A random identifier that should be stored on the device that started the sign in process.
      example: TU/52WOcktSv99zqaAZuWJG9BSoS0aRLfCbep8rFEwk=

    userInputCode:
      type: string
      description: This can be used to authenticate the user when paired with the deviceId
      example: 456123

    linkCode:
      type: string
      description: URL-safe string that can be used to authenticate the user, without the deviceId
      example: b10lbT_SnDC4flA6Fn7pE5TtG5k5NfigLef4QMBeGA8

    jwtSigningPublicKey:
      type: string
      example: MIIBIjANBgkq...nKH0QIDAQAB
    
    jwtSigningPublicKeyCreatedAt:
      type: number
      example: 1624344236945

    jwtSigningPublicKeyExpiryTime:
      type: number
      example: 1624345236945
    
    jwtSigningPublicKeyList:
      type: array
      items:
        type: object
        properties: 
          publicKey:
            $ref: '#/components/schemas/jwtSigningPublicKey'
          createdAt:
            $ref: '#/components/schemas/jwtSigningPublicKeyCreatedAt'
          expiryTime:
            $ref: '#/components/schemas/jwtSigningPublicKeyExpiryTime'

    accessTokenBlacklistingEnabled:
      type: boolean
      example: true
      
    accessTokenValidity:
      type: number
      example: 3600000
    
    refreshTokenValidity:
      type: number
      example: 8640000000
              
    statusOK:
      type: string
      enum:
        - OK
    
    userDataInJWT:
      type: object
      description: should be a JSON object (not a JSON literal nor an array)
      example: {"test":123}
    
    userDataInDatabase:
      type: object
      description: should be a JSON object (not a JSON literal nor an array)
      example: {"test":123}
      
    enableAntiCsrf:
      type: boolean
      example: false
    
    handle:
      type: string
      example: 68en6gd6-865b-4af6-ba00-96e5c153257d
    
    message:
      type: string
      example: Error Message
      
    session:
      type: object
      properties:
        handle:
          $ref: '#/components/schemas/handle'
        userId:
          $ref: '#/components/schemas/userId'
        userDataInJWT:
          $ref: '#/components/schemas/userDataInJWT'
    
    cookieInfo:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/token'
        expiry:
          $ref: '#/components/schemas/expiry'
        createdTime:
          $ref: '#/components/schemas/timeCreated'
    
    expiry:
      type: number
      example: 1637262633029
      
    timeCreated:
      type: number
      example: 1637262633029
      
          
    sessionHandles:
      type: array
      items:
        $ref: '#/components/schemas/handle'

    createJWTPayload:
      type: object
      description: The payload of the JWT, should be a JSON object.
      example: {"custom-claim": ""}

    createJWTAlgorithm:
      type: string
      description: The algorithm to use when creating the JWT.
      enum: ["RS256"]

    jwksDomain:
      type: string
      description: This is used as the value for the issuer claim in the JWT payload.
      example: https://api.test.com/
    jwtValidity:
      type: number
      description: Duration in seconds, used to calculate JWT expiry
      example: 86400

    jwk:
      type: object
      description: A JWK that can be used to verify a JWT
      properties:
        alg:
          $ref: '#/components/schemas/createJWTAlgorithm'
        kty:
          type: string
          example: RSA
        use:
          type: string
          example: sig
        kid:
          type: string
          description: Unique identifier for the JWK
        x5c:
          type: array
          description: X.509 Certificate Chain
          items:
            type: string

    unauthorisedMessageResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/unauthorisedResponse'
        message:
          $ref: '#/components/schemas/message'
    
    helloResponse:
      type: string
      enum: ['Hello']
    
   
    statusOKResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['OK']
          
        
    wrongCredentialsResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['WRONG_CREDENTIALS_ERROR']

    unknownUserIdResponse:
      type: object
      properties:
        status:
          type: string
          enum: ['UNKNOWN_USER_ID_ERROR']
          
          
          
    tokenTheftResponse:
        type: string
        enum: ['TOKEN_THEFT_DETECTED']
    
    unauthorisedResponse:
        type: string
        enum: ['UNAUTHORISED']
    
    tryRefreshTokenResponse:
        type: string
        enum: ['TRY_REFRESH_TOKEN']
    
    
    
    internalError:
      type: string
      enum: 
        - Internal Error
    
    notFound:
      type: string
      enum:
        - Not Found
        
    methodNotSupported:
      type: string
      enum:
        - Method not supported

    invalidJSON:
      type: string

    requestUnauthorised:
      type: string
      enum:
        - Invalid API key
